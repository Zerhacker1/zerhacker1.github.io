import "./chunk-76J2PTFD.js";

// node_modules/@spissvinkel/simplex-noise/index.js
var mkSimplexNoise = (random) => {
  const tables = buildPermutationTables(random);
  return {
    noise2D: (x, y) => noise2D(tables, x, y),
    noise3D: (x, y, z) => noise3D(tables, x, y, z),
    noise4D: (x, y, z, w) => noise4D(tables, x, y, z, w)
  };
};
var noise2D = (tables, x, y) => {
  const { perm, permMod12 } = tables;
  let n0 = 0, n1 = 0, n2 = 0;
  var s = (x + y) * F2;
  var i = Math.floor(x + s);
  var j = Math.floor(y + s);
  var t = (i + j) * G2;
  const x00 = i - t;
  const y00 = j - t;
  const x0 = x - x00;
  const y0 = y - y00;
  const i1 = x0 > y0 ? 1 : 0;
  const j1 = x0 > y0 ? 0 : 1;
  const x1 = x0 - i1 + G2;
  const y1 = y0 - j1 + G2;
  const x2 = x0 - 1 + 2 * G2;
  const y2 = y0 - 1 + 2 * G2;
  const ii = i & 255;
  const jj = j & 255;
  let t0 = 0.5 - x0 * x0 - y0 * y0;
  if (t0 >= 0) {
    const gi0 = permMod12[ii + perm[jj]] * 3;
    t0 *= t0;
    n0 = t0 * t0 * (GRAD3[gi0] * x0 + GRAD3[gi0 + 1] * y0);
  }
  let t1 = 0.5 - x1 * x1 - y1 * y1;
  if (t1 >= 0) {
    const gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;
    t1 *= t1;
    n1 = t1 * t1 * (GRAD3[gi1] * x1 + GRAD3[gi1 + 1] * y1);
  }
  let t2 = 0.5 - x2 * x2 - y2 * y2;
  if (t2 >= 0) {
    const gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;
    t2 *= t2;
    n2 = t2 * t2 * (GRAD3[gi2] * x2 + GRAD3[gi2 + 1] * y2);
  }
  return 70 * (n0 + n1 + n2);
};
var noise3D = (tables, x, y, z) => {
  const { perm, permMod12 } = tables;
  let n0 = 0, n1 = 0, n2 = 0, n3 = 0;
  const s = (x + y + z) * F3;
  const i = Math.floor(x + s);
  const j = Math.floor(y + s);
  const k = Math.floor(z + s);
  const t = (i + j + k) * G3;
  const x00 = i - t;
  const y00 = j - t;
  const z00 = k - t;
  const x0 = x - x00;
  const y0 = y - y00;
  const z0 = z - z00;
  let i1, j1, k1;
  let i2, j2, k2;
  if (x0 >= y0) {
    if (y0 >= z0) {
      i1 = 1;
      j1 = 0;
      k1 = 0;
      i2 = 1;
      j2 = 1;
      k2 = 0;
    } else if (x0 >= z0) {
      i1 = 1;
      j1 = 0;
      k1 = 0;
      i2 = 1;
      j2 = 0;
      k2 = 1;
    } else {
      i1 = 0;
      j1 = 0;
      k1 = 1;
      i2 = 1;
      j2 = 0;
      k2 = 1;
    }
  } else {
    if (y0 < z0) {
      i1 = 0;
      j1 = 0;
      k1 = 1;
      i2 = 0;
      j2 = 1;
      k2 = 1;
    } else if (x0 < z0) {
      i1 = 0;
      j1 = 1;
      k1 = 0;
      i2 = 0;
      j2 = 1;
      k2 = 1;
    } else {
      i1 = 0;
      j1 = 1;
      k1 = 0;
      i2 = 1;
      j2 = 1;
      k2 = 0;
    }
  }
  const x1 = x0 - i1 + G3;
  const y1 = y0 - j1 + G3;
  const z1 = z0 - k1 + G3;
  const x2 = x0 - i2 + 2 * G3;
  const y2 = y0 - j2 + 2 * G3;
  const z2 = z0 - k2 + 2 * G3;
  const x3 = x0 - 1 + 3 * G3;
  const y3 = y0 - 1 + 3 * G3;
  const z3 = z0 - 1 + 3 * G3;
  const ii = i & 255;
  const jj = j & 255;
  const kk = k & 255;
  let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
  if (t0 >= 0) {
    const gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;
    t0 *= t0;
    n0 = t0 * t0 * (GRAD3[gi0] * x0 + GRAD3[gi0 + 1] * y0 + GRAD3[gi0 + 2] * z0);
  }
  let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
  if (t1 >= 0) {
    const gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;
    t1 *= t1;
    n1 = t1 * t1 * (GRAD3[gi1] * x1 + GRAD3[gi1 + 1] * y1 + GRAD3[gi1 + 2] * z1);
  }
  let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
  if (t2 >= 0) {
    const gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;
    t2 *= t2;
    n2 = t2 * t2 * (GRAD3[gi2] * x2 + GRAD3[gi2 + 1] * y2 + GRAD3[gi2 + 2] * z2);
  }
  let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
  if (t3 >= 0) {
    var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;
    t3 *= t3;
    n3 = t3 * t3 * (GRAD3[gi3] * x3 + GRAD3[gi3 + 1] * y3 + GRAD3[gi3 + 2] * z3);
  }
  return 32 * (n0 + n1 + n2 + n3);
};
var noise4D = (tables, x, y, z, w) => {
  const { perm } = tables;
  let n0 = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0;
  const s = (x + y + z + w) * F4;
  const i = Math.floor(x + s);
  const j = Math.floor(y + s);
  const k = Math.floor(z + s);
  const l = Math.floor(w + s);
  const t = (i + j + k + l) * G4;
  const x00 = i - t;
  const y00 = j - t;
  const z00 = k - t;
  const w00 = l - t;
  const x0 = x - x00;
  const y0 = y - y00;
  const z0 = z - z00;
  const w0 = w - w00;
  let rankx = 0;
  let ranky = 0;
  let rankz = 0;
  let rankw = 0;
  if (x0 > y0)
    rankx++;
  else
    ranky++;
  if (x0 > z0)
    rankx++;
  else
    rankz++;
  if (x0 > w0)
    rankx++;
  else
    rankw++;
  if (y0 > z0)
    ranky++;
  else
    rankz++;
  if (y0 > w0)
    ranky++;
  else
    rankw++;
  if (z0 > w0)
    rankz++;
  else
    rankw++;
  let i1, j1, k1, l1;
  let i2, j2, k2, l2;
  let i3, j3, k3, l3;
  i1 = rankx >= 3 ? 1 : 0;
  j1 = ranky >= 3 ? 1 : 0;
  k1 = rankz >= 3 ? 1 : 0;
  l1 = rankw >= 3 ? 1 : 0;
  i2 = rankx >= 2 ? 1 : 0;
  j2 = ranky >= 2 ? 1 : 0;
  k2 = rankz >= 2 ? 1 : 0;
  l2 = rankw >= 2 ? 1 : 0;
  i3 = rankx >= 1 ? 1 : 0;
  j3 = ranky >= 1 ? 1 : 0;
  k3 = rankz >= 1 ? 1 : 0;
  l3 = rankw >= 1 ? 1 : 0;
  const x1 = x0 - i1 + G4;
  const y1 = y0 - j1 + G4;
  const z1 = z0 - k1 + G4;
  const w1 = w0 - l1 + G4;
  const x2 = x0 - i2 + 2 * G4;
  const y2 = y0 - j2 + 2 * G4;
  const z2 = z0 - k2 + 2 * G4;
  const w2 = w0 - l2 + 2 * G4;
  const x3 = x0 - i3 + 3 * G4;
  const y3 = y0 - j3 + 3 * G4;
  const z3 = z0 - k3 + 3 * G4;
  const w3 = w0 - l3 + 3 * G4;
  const x4 = x0 - 1 + 4 * G4;
  const y4 = y0 - 1 + 4 * G4;
  const z4 = z0 - 1 + 4 * G4;
  const w4 = w0 - 1 + 4 * G4;
  const ii = i & 255;
  const jj = j & 255;
  const kk = k & 255;
  const ll = l & 255;
  let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
  if (t0 >= 0) {
    const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32 * 4;
    t0 *= t0;
    n0 = t0 * t0 * (GRAD4[gi0] * x0 + GRAD4[gi0 + 1] * y0 + GRAD4[gi0 + 2] * z0 + GRAD4[gi0 + 3] * w0);
  }
  let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
  if (t1 >= 0) {
    const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32 * 4;
    t1 *= t1;
    n1 = t1 * t1 * (GRAD4[gi1] * x1 + GRAD4[gi1 + 1] * y1 + GRAD4[gi1 + 2] * z1 + GRAD4[gi1 + 3] * w1);
  }
  let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
  if (t2 >= 0) {
    const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32 * 4;
    t2 *= t2;
    n2 = t2 * t2 * (GRAD4[gi2] * x2 + GRAD4[gi2 + 1] * y2 + GRAD4[gi2 + 2] * z2 + GRAD4[gi2 + 3] * w2);
  }
  let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
  if (t3 >= 0) {
    const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32 * 4;
    t3 *= t3;
    n3 = t3 * t3 * (GRAD4[gi3] * x3 + GRAD4[gi3 + 1] * y3 + GRAD4[gi3 + 2] * z3 + GRAD4[gi3 + 3] * w3);
  }
  let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
  if (t4 >= 0) {
    const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32 * 4;
    t4 *= t4;
    n4 = t4 * t4 * (GRAD4[gi4] * x4 + GRAD4[gi4 + 1] * y4 + GRAD4[gi4 + 2] * z4 + GRAD4[gi4 + 3] * w4);
  }
  return 27 * (n0 + n1 + n2 + n3 + n4);
};
var buildPermutationTables = (random) => {
  const perm = new Uint8Array(512);
  const permMod12 = new Uint8Array(512);
  const tmp = new Uint8Array(256);
  for (let i = 0; i < 256; i++)
    tmp[i] = i;
  for (let i = 0; i < 255; i++) {
    const r = i + ~~(random() * (256 - i));
    const v2 = tmp[r];
    tmp[r] = tmp[i];
    perm[i] = perm[i + 256] = v2;
    permMod12[i] = permMod12[i + 256] = v2 % 12;
  }
  const v = tmp[255];
  perm[255] = perm[511] = v;
  permMod12[255] = permMod12[511] = v % 12;
  return { perm, permMod12 };
};
var F2 = 0.5 * (Math.sqrt(3) - 1);
var G2 = (3 - Math.sqrt(3)) / 6;
var F3 = 1 / 3;
var G3 = 1 / 6;
var F4 = (Math.sqrt(5) - 1) / 4;
var G4 = (5 - Math.sqrt(5)) / 20;
var GRAD3 = new Float32Array([
  1,
  1,
  0,
  -1,
  1,
  0,
  1,
  -1,
  0,
  -1,
  -1,
  0,
  1,
  0,
  1,
  -1,
  0,
  1,
  1,
  0,
  -1,
  -1,
  0,
  -1,
  0,
  1,
  1,
  0,
  -1,
  1,
  0,
  1,
  -1,
  0,
  -1,
  -1
]);
var GRAD4 = new Float32Array([
  0,
  1,
  1,
  1,
  0,
  1,
  1,
  -1,
  0,
  1,
  -1,
  1,
  0,
  1,
  -1,
  -1,
  0,
  -1,
  1,
  1,
  0,
  -1,
  1,
  -1,
  0,
  -1,
  -1,
  1,
  0,
  -1,
  -1,
  -1,
  1,
  0,
  1,
  1,
  1,
  0,
  1,
  -1,
  1,
  0,
  -1,
  1,
  1,
  0,
  -1,
  -1,
  -1,
  0,
  1,
  1,
  -1,
  0,
  1,
  -1,
  -1,
  0,
  -1,
  1,
  -1,
  0,
  -1,
  -1,
  1,
  1,
  0,
  1,
  1,
  1,
  0,
  -1,
  1,
  -1,
  0,
  1,
  1,
  -1,
  0,
  -1,
  -1,
  1,
  0,
  1,
  -1,
  1,
  0,
  -1,
  -1,
  -1,
  0,
  1,
  -1,
  -1,
  0,
  -1,
  1,
  1,
  1,
  0,
  1,
  1,
  -1,
  0,
  1,
  -1,
  1,
  0,
  1,
  -1,
  -1,
  0,
  -1,
  1,
  1,
  0,
  -1,
  1,
  -1,
  0,
  -1,
  -1,
  1,
  0,
  -1,
  -1,
  -1,
  0
]);
export {
  mkSimplexNoise
};
//# sourceMappingURL=@spissvinkel_simplex-noise.js.map
