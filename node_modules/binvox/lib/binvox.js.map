{"version":3,"file":"binvox.js","sources":["../src/Parser.js","../src/Builder.js"],"sourcesContent":["\n/**\n * @typedef {Object} Voxel The actual voxel data, describing a filled voxel.\n * @property {number} x The x coordinate of the voxel.\n * @property {number} y The y coordinate of the voxel.\n * @property {number} z The z coordinate of the voxel.\n */\n\n/**\n * @typedef {Object} VoxelData Parsed BINVOX file data structure representation.\n * @property {Object} dimension The dimension of the voxel data.\n * @property {number} dimension.depth The depth dimension of the voxel data.\n * @property {number} dimension.width The width dimension of the voxel data.\n * @property {number} dimension.height The height dimension of the voxel data.\n * @property {Object} translate The translation of the voxel data.\n * @property {number} translate.depth The depth translation of the voxel data.\n * @property {number} translate.width The width translation of the voxel data.\n * @property {number} translate.height The height translation of the voxel data.\n * @property {number} scale The scaling of the voxel data.\n * @property {Array<Voxel>} voxels The actual voxel data, describing filled voxels.\n */\n\n/**\n * Parser for parsing BINVOX voxel file data.\n */\nexport class Parser {\n\n  /**\n   * Creates a BINVOX Parser.\n   */\n  constructor() {\n    this.dimension = {};\n    this.translation = {};\n    this.scale = 1;\n    this.voxels = [];\n    this.index = 0;\n  }\n\n  /**\n   * Parse BINVOX file buffer data.\n   * @param {ArrayBuffer} buffer BINVOX buffer data.\n   * @returns {VoxelData} The parsed voxel data.\n   */\n  parse(buffer) {\n    this._parseHeader(buffer);\n    this._parseVoxelData(buffer);\n\n    return {\n      dimension: this.dimension,\n      translate: this.translation,\n      scale: this.scale,\n      voxels: this.voxels\n    }\n  }\n\n  /**\n   * Parse the BINVOX ASCII file header.\n   * @param {ArrayBuffer} buffer BINVOX file buffer data.\n   * @private\n   */\n  _parseHeader(buffer) {\n    var decoder = new TextDecoder('ascii');\n    let continueReading = true;\n    let lines = [];\n\n    let i = this.index;\n    let line = \"\";\n    while (continueReading) {\n      let char = decoder.decode(buffer.slice(i, i + 1));\n      if (char === \"\\n\") {\n        lines.push(line);\n        line = \"\";\n      } else {\n        line += char;\n      }\n      if (line === \"Data\" || lines.length >= 5) {\n        continueReading = false;\n      }\n      i++;\n    }\n\n    this.index = i;\n\n    let version = lines[0];\n    let dimension = lines[1];\n    let translate = lines[2];\n    let scale = lines[3];\n    let data = lines[4];\n\n    // Check \"version\" line\n    if (version !== \"#binvox 1\") {\n      throw new Error(\"First line reads \\\"\" + version + \"\\\" instead of \\\"#binvox\\\"\");\n    }\n\n    // Parse \"dimension\"\n    let dimensionArray = dimension.split(\" \");\n    if (dimensionArray[0] !== \"dim\") {\n      throw new Error(\"Error reading dimension line\");\n    }\n    this.dimension = { depth: parseInt(dimensionArray[1]), width: parseInt(dimensionArray[2]), height: parseInt(dimensionArray[3]) };\n\n    // Parse \"translation\"\n    let translateArray = translate.split(\" \");\n    if (translateArray[0] !== \"translate\") {\n      throw new Error(\"Error reading translate line\");\n    }\n    this.translation = { depth: parseFloat(translateArray[1]), width: parseFloat(translateArray[2]), height: parseFloat(translateArray[3]) };\n\n    // Parse \"scale\"\n    let scaleArray = scale.split(\" \");\n    if (scaleArray[0] !== \"scale\") {\n      throw new Error(\"Error reading scale line\");\n    }\n    this.scale = parseFloat(scaleArray[1]);\n\n    // Check \"data\" line\n    if (data !== \"data\") {\n      throw new Error(\"Error reading header\");\n    }\n  }\n\n  /**\n   * Parse the voxel buffer data.\n   * @param {ArrayBuffer} buffer BINVOX file voxel buffer data.\n   * @private\n   */\n  _parseVoxelData(buffer) {\n    var int8view = new Uint8Array(buffer, this.index);\n\n    let i = 0;\n    let y = 0;\n    let z = 0;\n    let x = 0;\n\n    while (i < int8view.length) {\n      const value = int8view[i];\n      const count = int8view[i + 1];\n\n      for (let j = 0; j < count; j++) {\n        if (value === 1) {\n          let point = { x: x, y: y, z: z };\n          this.voxels.push(point);\n        }\n        y++;\n        if (y === this.dimension.width) {\n          y = 0;\n          z++;\n        }\n        if (z === this.dimension.height) {\n          z = 0;\n          x++;\n        }\n      }\n      i += 2;\n    }\n  }\n}\n","\n/**\n * Builder for making BINVOX buffer data.\n */\nexport class Builder {\n\n  /**\n   * Creates a new BINVOX Builder.\n   */\n  constructor() {\n    this.dimension = {};\n    this.translation = {};\n    this.scale = 1;\n    this.voxels = [];\n  }\n\n  /**\n   * Build BINVOX file buffer data.\n   * @param {VoxelData} data JavaScript representation of BINVOX voxel data.\n   */\n  build(data) {\n    this.dimension = data.dimension;\n    this.translation = data.translate;\n    this.scale = data.scale;\n    this.voxels = data.voxels;\n\n    let headerTArray = this._generateHeader();\n    let voxelsTArray = this._generateVoxelData();\n\n    // Concatenate the two typed arrays.\n    var binvoxArray = new Uint8Array(headerTArray.length + voxelsTArray.length);\n    binvoxArray.set(headerTArray);\n    binvoxArray.set(voxelsTArray, headerTArray.length);\n\n    return binvoxArray.buffer;\n  }\n\n  /**\n   * Generate the ASCII BINVOX file header.\n   * @private\n   */\n  _generateHeader() {\n    var encoder = new TextEncoder('ascii');\n\n    let header = \"\";\n    header += \"#binvox 1\\n\";\n    header += \"dim \" + [this.dimension.depth, this.dimension.width, this.dimension.height].join(\" \") + \"\\n\";\n    header += \"translate \" + [this.translation.depth, this.translation.width, this.translation.height].join(\" \") + \"\\n\";\n    header += \"scale \" + this.scale + \"\\n\";\n    header += \"data\\n\";\n\n    return encoder.encode(header);\n  }\n\n  /**\n   * Generate the binary voxel data.\n   * @private\n   */\n  _generateVoxelData() {\n    let index = 0;\n    let count = 0;\n    let state;\n    if (\n      this.voxels[0].x === 0 &&\n      this.voxels[0].y === 0 &&\n      this.voxels[0].z === 0\n    ) {\n      state = 1;\n    } else {\n      state = 0;\n    }\n\n    let array = [];\n\n    for (let i = 0; i < this.dimension.depth; i++) {\n      for (let j = 0; j < this.dimension.height; j++) {\n        for (let k = 0; k < this.dimension.width; k++) {\n\n          let value = 0;\n          if (\n            this.voxels[index] !== undefined &&\n            this.voxels[index].x === i &&\n            this.voxels[index].y === k &&\n            this.voxels[index].z === j\n          ) {\n            index++;\n            value = 1;\n          }\n\n          if (value === state) {\n            count++;\n            if (count === 255) {\n              // Max count encountered!\n              array.push(state, count);\n              count = 0;\n            }\n          } else {\n            // Switch in state detected!\n            array.push(state, count);\n            state = value;\n            count = 1;\n          }\n        }\n      }\n    }\n    // Handle remaining.\n    if (count > 0) {\n      array.push(state, count);\n    }\n\n    return new Uint8Array(array);\n  }\n}\n"],"names":["Parser","dimension","translation","scale","voxels","index","buffer","_parseHeader","_parseVoxelData","translate","decoder","TextDecoder","continueReading","lines","i","line","char","decode","slice","push","length","version","data","Error","dimensionArray","split","depth","parseInt","width","height","translateArray","parseFloat","scaleArray","int8view","Uint8Array","y","z","x","value","count","j","point","Builder","headerTArray","_generateHeader","voxelsTArray","_generateVoxelData","binvoxArray","set","encoder","TextEncoder","header","join","encode","state","array","k","undefined"],"mappings":"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"}